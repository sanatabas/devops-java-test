plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'com.avast.gradle.docker-compose' version "0.8.14"
}

group = 'com.mycompany'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    springfoxSwaggerVersion = '2.9.2'
    modelMapperVersion = '2.3.2'
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.projectlombok:lombok'
    compile "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"
    compile "org.modelmapper:modelmapper:${modelMapperVersion}"
    runtime 'mysql:mysql-connector-java'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.junit.jupiter:junit-jupiter-api'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

// enable JUnit 5

test {
    useJUnitPlatform()
}

// adding docker-compose plugin

dockerCompose {
    useComposeFiles = ["docker-compose.yml"]
}

// adding integration test

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
//        resources.srcDir file('src/integration-test/resources')
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
//        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group 'springboot-testing'
    description 'Runs the integration tests'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dockerCompose.isRequiredBy(integrationTest)
dockerCompose.isRequiredBy(test)
